"use strict";(self.webpackChunk_giraffechain_sdk_docs=self.webpackChunk_giraffechain_sdk_docs||[]).push([[974],{9226:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=a(4848),s=a(8453);const i={description:"Information about the Giraffe Chain SDK",slug:"/sdk",sidebar_position:3},r="Software Development Kit (SDK)",o={id:"sdk/index",title:"Software Development Kit (SDK)",description:"Information about the Giraffe Chain SDK",source:"@site/docs/sdk/index.md",sourceDirName:"sdk",slug:"/sdk",permalink:"/docs/sdk",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Information about the Giraffe Chain SDK",slug:"/sdk",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Fundamentals",permalink:"/docs/fundamentals"},next:{title:"Data Models",permalink:"/docs/models"}},d={},l=[{value:"Install",id:"install",level:2},{value:"Initialize",id:"initialize",level:2},{value:"First launch",id:"first-launch",level:3},{value:"Subsequent launches",id:"subsequent-launches",level:3},{value:"Send funds",id:"send-funds",level:2},{value:"Create graph data",id:"create-graph-data",level:2},{value:"Query graph data",id:"query-graph-data",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"software-development-kit-sdk",children:"Software Development Kit (SDK)"})}),"\n",(0,t.jsx)(n.p,{children:"The Giraffe SDK provides programmatic access to Giraffe Chain data. At this time, the SDK is offered in TypeScript, although more languages will be supported in the future."}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsx)(n.p,{children:"Install SDK module:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm install @giraffechain/giraffe-sdk\n"})}),"\n",(0,t.jsx)(n.h2,{id:"initialize",children:"Initialize"}),"\n",(0,t.jsx)(n.h3,{id:"first-launch",children:"First launch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import * as g from "@giraffechain/giraffe-sdk";\n// The user of your app should record this mnemonic somewhere (using pen and paper preferably)\nconst mnemonic = g.GiraffeWallet.generateMnemonic();\n// The user of your app should provide their own password\nconst password = "";\n// This key can be saved somewhere (securely) for future retrieval\nconst sk = await g.GiraffeWallet.keyFromMnemonic(mnemonic, password);\n// "giraffe" is your entrypoint into the rest of the SDK\nconst giraffe = await g.Giraffe.init("http://localhost:2024/api", g.GiraffeWallet.fromSk(sk));\n\n// Because this is a new wallet, it has no funds. You can receive funds from the "genesis" wallet\nawait giraffe.transferFromGenesisWallet(5000000);\n\n// Funds will be available in the main wallet after the next block\nawait giraffe.client.nextBlockId();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"subsequent-launches",children:"Subsequent launches"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import * as g from "@giraffechain/giraffe-sdk";\n// Implement your own functionality to load the key you saved from the first launch\nconst sk = loadKey();\nconst giraffe = await g.Giraffe.init("http://localhost:2024", g.GiraffeWallet.fromSk(sk));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"send-funds",children:"Send funds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// This function adds the necessary inputs to fund the desired outputs, handles fees, signs, and broadcasts the transaction.\nconst tx = await giraffe.paySignBroadcast(\n  g.Transaction.fromJSON(\n    {\n      outputs: [\n        {\n          lockAddress: g.decodeLockAddress("a_123456"),\n          value: {\n            quantity: 5000,\n          }\n        }\n      ],\n    }\n  )\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"create-graph-data",children:"Create graph data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'await giraffe.paySignBroadcast(\n  Transaction.fromJSON(\n    {\n      outputs: [\n        giraffe.graph.createVertexOutput("user", undefined),\n        giraffe.graph.createVertexOutput("profile", {"firstName": "Alan", "lastName": "Turing"})\n        // Creates an edge connecting two vertices from _this_ transaction\n        giraffe.graph.createEdgeOutput("userProfile", {transactionId: undefined, index: 1}, {transactionId: undefined, index: 0}, {})\n      ]\n    }\n  )\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"query-graph-data",children:"Query graph data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const vertexIds = await giraffe.client.queryVertices("profile", [["firstName", "==", "Alan"]]);\nfor(const vertexId of vertexIds) {\n  const output = await giraffe.client.getTransactionOutput(vertexId);\n  const vertex = output.value?.graphEntry?.vertex!;\n  const lastName = vertex.data["lastName"];\n}\n'})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);