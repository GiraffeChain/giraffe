syntax = "proto3";

package blockchain.models;

import "validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

message BlockId {
    // Base58 encoded
    string value = 1;
}

// Captures a block producer's consensus-commitment to a new block
message BlockHeader {
  // The ID of _this_ block header.  This value is optional and its contents are not included in the signable or identifiable data.  Clients which _can_ verify
  // this value should verify this value, but some clients may not be able to or need to, in which case this field acts as a convenience.
  BlockId headerId = 12;
  // The parent block's ID.  Each header builds from a single parent.
  BlockId parentHeaderId = 1 [(validate.rules).message.required = true];
  // The slot of the parent block
  uint64 parentSlot = 2;
  // The commitment/accumulator of the block body
  // length = 32
  string txRoot = 3;
  // The UTC UNIX timestamp (ms) when the block was created
  uint64 timestamp = 4;
  // The 1-based index of this block in the blockchain
  uint64 height = 5;
  // The time-slot in which the block producer created the block
  uint64 slot = 6;
  // A certificate indicating that the block producer was eligible to make this block
  EligibilityCertificate eligibilityCertificate = 7 [(validate.rules).message.required = true];
  // A certificate indicating the operator's commitment to this block
  OperationalCertificate operationalCertificate = 8 [(validate.rules).message.required = true];
  // Optional metadata stamped by the operator.
  // optional
  string metadata = 9;
  // The operator's staking account location
  TransactionOutputReference account = 10 [(validate.rules).message.required = true];
  // Configuration or protocol changes
  map<string, string> settings = 11;
}

// A certificate proving the operator's election
message EligibilityCertificate {
    // Signs `eta ++ slot` using the `vrfSK`
    // Base58 encoded
    // length = 80
    string vrfSig = 1;
    // The VRF VK
    // Base58 encoded
    // length = 32
    string vrfVK = 2;
    // Hash of the operator's `threshold`
    // routine = blake2b256
    // Base58 encoded
    // length = 32
    string thresholdEvidence = 3;
    // The epoch's randomness
    // Base58 encoded
    // length = 32
    string eta = 4;
  }

// A certificate which commits an operator to a linear key, which is then used to sign the block
message OperationalCertificate {
    // The KES VK of the parent key (forward-secure) (hour+minute hands)
    VerificationKeyKesProduct parentVK = 1 [(validate.rules).message.required = true];
    // Signs the `childVK` using the `parentSK`
    SignatureKesProduct parentSignature = 2 [(validate.rules).message.required = true];
    // The linear VK
    // length = 32
    string childVK = 3;
    // The signature of the block
    // length = 64
    string childSignature = 4;
}

message VerificationKeyKesProduct {
    // length = 32
    string value = 1;
    uint32 step = 2;
}

message SignatureKesSum {
    // length = 32
    string verificationKey = 1;
    // length = 64
    string signature = 2;
    // item length = 32
    repeated string witness = 3;
}

message SignatureKesProduct {
    SignatureKesSum superSignature = 1 [(validate.rules).message.required = true];
    SignatureKesSum subSignature = 2 [(validate.rules).message.required = true];
    // length = 32
    string subRoot = 3;
}

// A glorified tuple
message SlotId {
    // The slot in which a block was created
    uint64 slot = 1;
    // The ID of the block
    BlockId blockId = 2 [(validate.rules).message.required = true];
}

message StakingAddress {
    // length = 32
    string value = 1;
}

// Captures the ordering of transaction IDs within a block
message BlockBody {
    // A list of Transaction IDs included in this block
    repeated TransactionId transactionIds = 1;
  }
  
  // Captures the ordering of transactions (not just IDs) within a block
  message FullBlockBody {
    // A list of Transactions included in this block
    repeated Transaction transactions = 1;

  }
  
  // Captures the header and all transactions in a block
  message Block {
    // The block's header
    BlockHeader header = 1 [(validate.rules).message.required = true];
    // The block's body
    BlockBody body = 2 [(validate.rules).message.required = true];
  }
  
  // Captures the header and all transactions in a block
  message FullBlock {
    // The block's header
    BlockHeader header = 1 [(validate.rules).message.required = true];
    // The block's full body
    FullBlockBody fullBody = 2 [(validate.rules).message.required = true];
  }

// Represents the identifier of a Transction.  It is constructed from the evidence of the signable bytes of the Transaction.
message TransactionId {
    // The evidence of the Transaction's signable bytes
    // Base58 encoded
    // length = 32
    string value = 1;
}

message Transaction {
    TransactionId transactionId = 1;
    // If this is a reward transaction, this field should be empty
    repeated TransactionInput inputs = 2;
    repeated TransactionOutput outputs = 3;
    repeated Witness attestation = 4;
    // User transactions should leave this empty.
    // When not null, this Transaction is assumed to be a reward transaction, and the value of this field should be the parent block ID
    BlockId rewardParentBlockId = 5;
}

message Witness {
    LockAddress lockAddress = 3 [(validate.rules).message.required = true];
    Lock lock = 1 [(validate.rules).message.required = true];
    Key key = 2 [(validate.rules).message.required = true];
}

message TransactionInput {
    TransactionOutputReference reference = 1 [(validate.rules).message.required = true];
    Value value = 2 [(validate.rules).message.required = true];
}

message TransactionOutputReference {
    TransactionId transactionId = 1 [(validate.rules).message.required = true];
    uint32 index = 2;
}

message TransactionOutput {
    LockAddress lockAddress = 1 [(validate.rules).message.required = true];
    Value value = 2 [(validate.rules).message.required = true];
    // Optional
    TransactionOutputReference account = 3;
}

message Value {
    uint64 quantity = 1;
    AccountRegistration accountRegistration = 2;
    // Optional
    GraphEntry graphEntry = 3;
}

message AccountRegistration {
    LockAddress associationLock = 1 [(validate.rules).message.required = true];
    // Optional.  If provided, introduces a new staker to the chain.
    StakingRegistration stakingRegistration = 2;
}

// A proof-of-stake registration
message StakingRegistration {
    SignatureKesProduct signature = 1 [(validate.rules).message.required = true];
    StakingAddress stakingAddress = 2 [(validate.rules).message.required = true];
}

message GraphEntry {
    oneof entry {
        Vertex vertex = 1;
        Edge edge = 2;
    }
}

message Vertex {
    string label = 1;
    google.protobuf.Struct data = 2;
    LockAddress edgeLockAddress = 3;
}

message Edge {
    string label = 1;
    google.protobuf.Struct data = 2;
    TransactionOutputReference a = 3 [(validate.rules).message.required = true];
    TransactionOutputReference b = 4 [(validate.rules).message.required = true];
}

// An active, registered participate in the consensus protocol, for a particular epoch.
message ActiveStaker {
    // The staker's registration.  If not provided, the StakingAddress is not associated with a StakingRegistration
    StakingRegistration registration = 1 [(validate.rules).message.required = true];
    // the quantity of staked tokens for the epoch
    int64 quantity = 2;
}

message LockAddress {
    // Base58 encoded
    // length = 32
    string value = 1;
}

message Lock {

    oneof value {
        Ed25519 ed25519 = 1;
    }

    message Ed25519 {
        // Base58 encoded
        // length = 32
        string vk = 1;
    }
}

message Key {

    oneof value {
        Ed25519 ed25519 = 1;
    }

    message Ed25519 {
        // Base58 encoded
        // length = 64
        string signature = 1;
    }
}

message PeerId {
    // Base58 encoded
    // length = 32
    string value = 1;
}

message PublicP2PState {
    ConnectedPeer localPeer = 1 [(validate.rules).message.required = true];
    repeated ConnectedPeer peers = 2;
}

message ConnectedPeer {
    PeerId peerId = 1 [(validate.rules).message.required = true];
    google.protobuf.StringValue host = 2;
    google.protobuf.UInt32Value port = 3;
}