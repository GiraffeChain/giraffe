syntax = "proto3";

package blockchain.services;

import 'models/core.proto';

import "validate/validate.proto";

service StakerSupportRpc {
    rpc BroadcastBlock (BroadcastBlockReq) returns (BroadcastBlockRes);
    rpc GetStaker(GetStakerReq) returns (GetStakerRes);
    rpc GetTotalActivestake(GetTotalActiveStakeReq) returns (GetTotalActiveStakeRes);
    rpc CalculateEta(CalculateEtaReq) returns (CalculateEtaRes);
    rpc PackBlock(PackBlockReq) returns (stream PackBlockRes);
}


message BroadcastBlockReq {
    blockchain.models.Block block = 1 [(validate.rules).message.required = true];
}

message BroadcastBlockRes {}


message GetStakerReq {
    blockchain.models.TransactionOutputReference stakingAccount = 1 [(validate.rules).message.required = true];
    blockchain.models.BlockId parentBlockId = 2 [(validate.rules).message.required = true];
    uint64 slot = 3;
}

message GetStakerRes {
    blockchain.models.ActiveStaker staker = 1;
}


message GetTotalActiveStakeReq {
    blockchain.models.BlockId parentBlockId = 1 [(validate.rules).message.required = true];
    uint64 slot = 2;
}

message GetTotalActiveStakeRes {
    int64 totalActiveStake = 1;
}


message CalculateEtaReq {
    blockchain.models.BlockId parentBlockId = 1 [(validate.rules).message.required = true];
    uint64 slot = 2;
}

message CalculateEtaRes {
    bytes eta = 1 [(validate.rules).bytes.len = 32];
}

message PackBlockReq {
    blockchain.models.BlockId parentBlockId = 1 [(validate.rules).message.required = true];
    uint64 untilSlot = 2;
}

message PackBlockRes {
    blockchain.models.BlockBody body = 1 [(validate.rules).message.required = true];
}
